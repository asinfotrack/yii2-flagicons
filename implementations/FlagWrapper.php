<?php
namespace asinfotrack\yii2\flagicons\implementations;

use asinfotrack\yii2\flagicons\Flag;
use asinfotrack\yii2\flagicons\widgets\FlagIcon;

/**
 * Wrapper class to allow for chaining of methods and generation
 * of the flag widget
 *
 * @author Pascal Mueller, AS infotrack AG
 * @link http://www.asinfotrack.ch
 * @license MIT
 */
class FlagWrapper
{

	/**
	 * @var string the mandatory country code consisting of two characters
	 */
	protected $countryCode;

	/**
	 * @var array options for the enclosing tag
	 */
	protected $options = [];

	/**
	 * @var string the tag-name to use
	 */
	protected $tagName = 'span';

	/**
	 * @var bool whether or not the flag should be square
	 */
	protected $isSquared = false;

	/**
	 * @param string $cssSize any css-size like '32px', '2em', etc.
	 */
	protected $sizeCss = Flag::SIZE_DEFAULT;

	/**
	 * The constructor for the wrapper class
	 *
	 * @param string $countryCode the country code consisting of two characters (eg us, de, ch)
	 * @param array $options the html options for the tag
	 */
	public function __construct($countryCode, $options=[])
	{
		$this->countryCode = $countryCode;
		$this->options = $options;
	}

	/**
	 * Sets the tag name which will be used (defaults to span)
	 *
	 * @param string $tagName the tag name to use
	 * @return \asinfotrack\yii2\flagicons\implementations\FlagWrapper self for chaining
	 */
	public function tagName($tagName)
	{
		$this->tagName = $tagName;
		return $this;
	}

	/**
	 * Sets whether or not to use squared flags (defaults to false)
	 *
	 * @param bool|true $isSquared
	 * @return \asinfotrack\yii2\flagicons\implementations\FlagWrapper self for chaining
	 */
	public function squared($isSquared=true)
	{
		$this->isSquared = $isSquared;
		return $this;
	}

	/**
	 * Sets the size of the flag. You can use any predefined constant of the Flag-class
	 * or set a value of your choice.
	 *
	 * @param string $sizeCss any css-size like '32px', '2em', etc.
	 * @return \asinfotrack\yii2\flagicons\implementations\FlagWrapper self for chaining
	 */
	public function size($sizeCss)
	{
		$this->sizeCss = $sizeCss;
		return $this;
	}

	/**
	 * Generates the actual html for the flag icon. This method will
	 * generate an instance of the FlagIcon widget and return the code
	 * @see \asinfotrack\yii2\flagicons\widgets\FlagIcon
	 *
	 * @return string the resulting html code as generated by the widget
	 * @throws \Exception
	 */
	function __toString()
	{
		return FlagIcon::widget([
			'countryCode'=>$this->countryCode,
			'options'=>$this->options,
			'tagName'=>$this->tagName,
			'isSquared'=>$this->isSquared,
			'sizeCss'=>$this->sizeCss,
		]);
	}

}
